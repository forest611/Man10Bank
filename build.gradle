plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '2.0.20'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'red.man10'
version = '1.0'

def kotlinVersion = '2.0.20'
def coroutinesVersion = '1.9.0'
def junitVersion = '5.11.0'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    // Server-provided APIs
    compileOnly 'io.papermc.paper:paper-api:1.20.4-R0.1-SNAPSHOT'
    compileOnly "com.github.MilkBowl:VaultAPI:1.7"
    compileOnly fileTree(dir: 'libs', include: '*.jar')

    // Kotlin stdlib (shade to jar)
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"

    // Coroutines (for lightweight async work)
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutinesVersion}"

    // Lightweight ORM: Ktorm (core + MySQL support). MySQL driver is provided by Paper.
    implementation "org.ktorm:ktorm-core:3.6.0"
    implementation "org.ktorm:ktorm-support-mysql:3.6.0"

    // Testing
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit5:${kotlinVersion}"
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}

shadowJar {
    archiveClassifier.set('')
}

build.dependsOn shadowJar

test {
    useJUnitPlatform()
}

// =========================
// Local deploy convenience
// =========================
// gradle deploy
// - 生成されたJarを Paper サーバーの plugins ディレクトリへコピーします。
// - 環境変数 DEPLOY_DIR または -PdeployDir=/path でコピー先を上書き可能。
def defaultDeployDir = System.getenv('DEPLOY_DIR') ?: project.findProperty('deployDir') ?: "/Volumes/M2_1TB/Documents/minecraft/Paper_1_20_4/plugins"
tasks.register('deploy') {
    group = 'distribution'
    description = 'Builds shadowJar and copies it to the Paper plugins directory.'
    dependsOn tasks.shadowJar
    doLast {
        def destDir = file(defaultDeployDir)
        if (!destDir.exists()) {
            throw new GradleException("コピー先が存在しません: ${destDir}")
        }
        // 最新のJar（shadowJar出力）
        def jarFile = tasks.shadowJar.archiveFile.get().asFile
        if (!jarFile.exists()) {
            throw new GradleException("JARが見つかりませんでした: ${jarFile}")
        }
        // 既存のMan10Bank-*.jarを削除（多重ロード防止）
        destDir.listFiles(new FilenameFilter() {
            boolean accept(File dir, String name) { name.startsWith('Man10Bank-') && name.endsWith('.jar') }
        })?.each { it.delete() }
        // コピー
        copy {
            from jarFile
            into destDir
        }
        println "Copied ${jarFile.name} -> ${destDir}"
    }
}
