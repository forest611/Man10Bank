plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '2.0.20'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'red.man10'
version = '1.0'

def kotlinVersion = '2.0.20'
def coroutinesVersion = '1.9.0'
def junitVersion = '5.11.0'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    // Server-provided APIs
    compileOnly 'io.papermc.paper:paper-api:1.20.4-R0.1-SNAPSHOT'
    compileOnly "com.github.MilkBowl:VaultAPI:1.7"
    compileOnly fileTree(dir: 'libs', include: '*.jar')

    // Kotlin stdlib (shade to jar)
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"

    // Coroutines (for lightweight async work)
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutinesVersion}"

    // Lightweight ORM: Ktorm (core + MySQL support). MySQL driver is provided by Paper.
    implementation "org.ktorm:ktorm-core:3.6.0"
    implementation "org.ktorm:ktorm-support-mysql:3.6.0"

    // Testing
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit5:${kotlinVersion}"
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}

shadowJar {
    archiveClassifier.set('')
}

build.dependsOn shadowJar

test {
    useJUnitPlatform()
}

// =========================
// Local deploy convenience
// =========================
// gradle deploy
// - ShellScript(local-build-deploy.sh)を呼び出して配布します（.env対応はシェル側）。
tasks.register('deploy') {
    group = 'distribution'
    description = 'shadowJarをビルドして、local-build-deploy.shを呼び出して配布します。'
    dependsOn tasks.shadowJar
    doLast {
        exec {
            commandLine 'sh', './local-build-deploy.sh', '--no-build'
        }
    }
}

// Build実行時にオプションでデプロイも実行（-Pdeploy もしくは DEPLOY_ON_BUILD=true）
def deployOnBuild = (project.hasProperty('deploy')
        || 'true'.equalsIgnoreCase(System.getenv('DEPLOY_ON_BUILD'))
        || '1' == System.getenv('DEPLOY_ON_BUILD'))
if (deployOnBuild) {
    tasks.named('build') { finalizedBy tasks.named('deploy') }
}
